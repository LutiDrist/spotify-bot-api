package main

import (
	"context"
	"log"
	"math/rand"
	"net/http"
	"net/url"
	"os"
	"time"

	"github.com/joho/godotenv"
	"github.com/zmb3/spotify/v2"
	spotifyauth "github.com/zmb3/spotify/v2/auth"
	"golang.org/x/oauth2/clientcredentials"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
	telegramToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if telegramToken == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN not set")
	}
	clientID := os.Getenv("SPOTIFY_CLIENT_ID")
	clientSecret := os.Getenv("SPOTIFY_CLIENT_SECRET")
	if clientID == "" || clientSecret == "" {
		log.Fatal("SPOTIFY_CLIENT_ID or SPOTIFY_CLIENT_SECRET not set")
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP-–∫–ª–∏–µ–Ω—Ç (VPN —É–∂–µ –≤–∫–ª—é—á—ë–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã)
	httpClient := http.DefaultClient

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Spotify
	ctx := context.Background()
	config := &clientcredentials.Config{
		ClientID:     clientID,
		ClientSecret: clientSecret,
		TokenURL:     spotifyauth.TokenURL,
	}
	token, err := config.Token(ctx)
	if err != nil {
		log.Fatalf("Could not get Spotify token: %v", err)
	}
	httpClient = spotifyauth.New().Client(ctx, token)
	client := spotify.New(httpClient)

	// –°–æ–∑–¥–∞—ë–º Telegram –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(telegramToken)
	if err != nil {
		log.Fatalf("Cannot create bot: %v", err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤
	genres := []string{"—Ä–æ–∫", "–ø–æ–ø", "–¥–∂–∞–∑"}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	for update := range updates {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		if update.Message != nil {
			if update.Message.Command() == "start" {
				var buttons []tgbotapi.InlineKeyboardButton
				for _, genre := range genres {
					buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(genre, "genre:"+genre))
				}
				buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData("–°–ª—É—á–∞–π–Ω—ã–π –∂–∞–Ω—Ä", "genre:random"))

				keyboard := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(buttons...),
				)

				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:")
				msg.ReplyMarkup = keyboard
				_, err := bot.Send(msg)
				if err != nil {
					log.Printf("Error sending message: %v", err)
				}
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
		if update.CallbackQuery != nil {
			callback := update.CallbackQuery
			data := callback.Data

			// –í—ã–±–æ—Ä –∂–∞–Ω—Ä–∞
			if len(data) > 6 && data[:6] == "genre:" {
				genre := data[6:]
				var responseText string
				if genre == "random" {
					responseText = "–¢—ã –≤—ã–±—Ä–∞–ª —Å–ª—É—á–∞–π–Ω—ã–π –∂–∞–Ω—Ä! –ß—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?"
				} else {
					responseText = "–¢—ã –≤—ã–±—Ä–∞–ª –∂–∞–Ω—Ä: " + genre + ". –ß—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?"
				}

				keyboard := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–ê–ª—å–±–æ–º", "choice:album:"+genre),
						tgbotapi.NewInlineKeyboardButtonData("–¢—Ä–µ–∫", "choice:track:"+genre),
						tgbotapi.NewInlineKeyboardButtonData("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "choice:artist:"+genre),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "back:genres"),
					),
				)

				msg := tgbotapi.NewMessage(callback.Message.Chat.ID, responseText)
				msg.ReplyMarkup = keyboard
				_, err := bot.Send(msg)
				if err != nil {
					log.Printf("Error sending message: %v", err)
				}

				bot.Request(tgbotapi.NewCallback(callback.ID, ""))
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ (–∞–ª—å–±–æ–º, —Ç—Ä–µ–∫, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)
			if len(data) > 7 && data[:7] == "choice:" {
				parts := splitData(data[7:])
				if len(parts) != 2 {
					continue
				}
				choice, genre := parts[0], parts[1]
				var coverURL, caption string
				var err error

				switch choice {
				case "album":
					coverURL, caption, err = searchAlbum(client, genre)
				case "track":
					coverURL, caption, err = searchTrack(client, genre)
				case "artist":
					coverURL, caption, err = searchArtist(client, genre)
				}

				if err != nil {
					msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: "+err.Error())
					_, err = bot.Send(msg)
					if err != nil {
						log.Printf("Error sending message: %v", err)
					}
				} else {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–±–ª–æ–∂–∫–æ–π –∏ –ø–æ–¥–ø–∏—Å—å—é
					photo := tgbotapi.NewPhoto(callback.Message.Chat.ID, tgbotapi.FileURL(coverURL))
					photo.Caption = caption
					_, err = bot.Send(photo)
					if err != nil {
						log.Printf("Error sending photo: %v", err)
						// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
						msg := tgbotapi.NewMessage(callback.Message.Chat.ID, caption)
						_, err = bot.Send(msg)
						if err != nil {
							log.Printf("Error sending message: %v", err)
						}
					}
				}

				bot.Request(tgbotapi.NewCallback(callback.ID, ""))
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
			if data == "back:genres" {
				var buttons []tgbotapi.InlineKeyboardButton
				for _, genre := range genres {
					buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(genre, "genre:"+genre))
				}
				buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData("–°–ª—É—á–∞–π–Ω—ã–π –∂–∞–Ω—Ä", "genre:random"))

				keyboard := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(buttons...),
				)

				msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:")
				msg.ReplyMarkup = keyboard
				_, err := bot.Send(msg)
				if err != nil {
					log.Printf("Error sending message: %v", err)
				}

				bot.Request(tgbotapi.NewCallback(callback.ID, ""))
			}
		}
	}
}

// splitData —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "album:–∂–∞–Ω—Ä" –Ω–∞ —á–∞—Å—Ç–∏
func splitData(data string) []string {
	parts := []string{}
	current := ""
	for _, r := range data {
		if r == ':' {
			if current != "" {
				parts = append(parts, current)
			}
			current = ""
		} else {
			current += string(r)
		}
	}
	if current != "" {
		parts = append(parts, current)
	}
	return parts
}

// mustParseURL –ø–∞—Ä—Å–∏—Ç URL –¥–ª—è –ø—Ä–æ–∫—Å–∏
func mustParseURL(proxy string) *url.URL {
	u, err := url.Parse(proxy)
	if err != nil {
		log.Fatalf("Invalid proxy URL: %v", err)
	}
	return u
}

// searchAlbum –∏—â–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∞–ª—å–±–æ–º –ø–æ –∂–∞–Ω—Ä—É
func searchAlbum(client *spotify.Client, genre string) (coverURL, caption string, err error) {
	ctx := context.Background()
	results, err := client.Search(ctx, genre+" album", spotify.SearchTypeAlbum)
	if err != nil {
		return "", "", err
	}
	if results.Albums != nil && len(results.Albums.Albums) > 0 {
		rand.Seed(time.Now().UnixNano())
		album := results.Albums.Albums[rand.Intn(len(results.Albums.Albums))]
		coverURL = album.Images[0].URL // –ü–µ—Ä–≤–∞—è –æ–±–ª–æ–∂–∫–∞ (–æ–±—ã—á–Ω–æ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è)
		caption = album.Artists[0].Name + " ‚Äî " + album.Name + "\nüü¢ Spotify: https://open.spotify.com/album/" + album.ID.String()
		return coverURL, caption, nil
	}
	return "", "–ê–ª—å–±–æ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", nil
}

// searchTrack –∏—â–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ –∂–∞–Ω—Ä—É
func searchTrack(client *spotify.Client, genre string) (coverURL, caption string, err error) {
	ctx := context.Background()
	results, err := client.Search(ctx, genre+" track", spotify.SearchTypeTrack)
	if err != nil {
		return "", "", err
	}
	if results.Tracks != nil && len(results.Tracks.Tracks) > 0 {
		rand.Seed(time.Now().UnixNano())
		track := results.Tracks.Tracks[rand.Intn(len(results.Tracks.Tracks))]
		coverURL = track.Album.Images[0].URL // –û–±–ª–æ–∂–∫–∞ –∏–∑ –∞–ª—å–±–æ–º–∞ —Ç—Ä–µ–∫–∞
		caption = track.Artists[0].Name + " ‚Äî " + track.Name + "\nüü¢ Spotify: https://open.spotify.com/track/" + track.ID.String()
		return coverURL, caption, nil
	}
	return "", "–¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", nil
}

// searchArtist –∏—â–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∂–∞–Ω—Ä—É
func searchArtist(client *spotify.Client, genre string) (coverURL, caption string, err error) {
	ctx := context.Background()
	results, err := client.Search(ctx, genre+" artist", spotify.SearchTypeArtist)
	if err != nil {
		return "", "", err
	}
	if results.Artists != nil && len(results.Artists.Artists) > 0 {
		rand.Seed(time.Now().UnixNano())
		artist := results.Artists.Artists[rand.Intn(len(results.Artists.Artists))]
		coverURL = ""
		if len(artist.Images) > 0 {
			coverURL = artist.Images[0].URL // –§–æ—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
		}
		caption = artist.Name + "\nüü¢ Spotify: https://open.spotify.com/artist/" + artist.ID.String()
		return coverURL, caption, nil
	}
	return "", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", nil
}
